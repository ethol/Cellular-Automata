package CA;


public class Run {



	public static void main(String[] args) {
		/*
		 * glidergun in a size 41 square CA
		 */
		final int[][]gliderGun = new int[][]{
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
				{0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},



		};


		final int[][] marioMin = new int[][]{
				{0,0,0,2,2,2,2,2,0,0,0,0},
				{0,0,2,2,2,2,2,2,2,2,2,0},
				{0,0,1,1,1,3,3,1,3,0,0,0},
				{0,1,3,1,3,3,3,1,3,3,3,0},
				{0,1,3,1,1,3,3,3,1,3,3,3},
				{0,1,1,3,3,3,3,1,1,1,1,0},
				{0,0,0,3,3,3,3,3,3,3,0,0},
				{0,0,1,1,2,1,1,1,0,0,0,0},
				{0,1,1,1,2,1,1,2,1,1,1,0},
				{1,1,1,1,2,2,2,2,1,1,1,1},
				{3,3,1,2,3,2,2,3,2,1,3,3},
				{3,3,3,2,2,2,2,2,2,3,3,3},
				{3,3,2,2,2,2,2,2,2,2,3,3},
				{0,0,2,2,2,0,0,2,2,2,0,0},
				{0,1,1,1,0,0,0,0,1,1,1,0},
				{1,1,1,1,0,0,0,0,1,1,1,1}
		};
		final int[][] mario = new int[][]{
				{0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0},
				{0,0,0,0,1,1,1,3,3,1,3,0,0,0,0,0},
				{0,0,0,1,3,1,3,3,3,1,3,3,3,0,0,0},
				{0,0,0,1,3,1,1,3,3,3,1,3,3,3,0,0},
				{0,0,0,1,1,3,3,3,3,1,1,1,1,0,0,0},
				{0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0},
				{0,0,0,0,1,1,2,1,1,1,0,0,0,0,0,0},
				{0,0,0,1,1,1,2,1,1,2,1,1,1,0,0,0},
				{0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0},
				{0,0,3,3,1,2,3,2,2,3,2,1,3,3,0,0},
				{0,0,3,3,3,2,2,2,2,2,2,3,3,3,0,0},
				{0,0,3,3,2,2,2,2,2,2,2,2,3,3,0,0},
				{0,0,0,0,2,2,2,0,0,2,2,2,0,0,0,0},
				{0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0},
				{0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0}
		};

		final int[][] creeper = new int[][]{
				{2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2},
				{2,2,1,1,2,2,1,1,2,2},
				{2,2,1,1,2,2,1,1,2,2},
				{2,2,2,2,1,1,2,2,2,2},
				{2,2,2,1,1,1,1,2,2,2},
				{2,2,2,1,1,1,1,2,2,2},
				{2,2,2,1,2,2,1,2,2,2},
				{2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2},
		};

		final int[][] creeperEasy = new int[][]{
				{1,1,0,0,1,1},
				{1,1,0,0,1,1},
				{0,0,1,1,0,0},
				{0,1,1,1,1,0},
				{0,1,1,1,1,0},
				{0,1,0,0,1,0},

		};
		final int[][] mushroom = new int[][]{
				{0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
				{0,0,0,1,1,2,2,2,2,0,0,1,1,0,0,0},
				{0,0,1,0,0,2,2,2,2,0,0,0,0,1,0,0},
				{0,1,0,0,2,2,2,2,2,2,0,0,0,0,1,0},
				{0,1,0,2,2,0,0,0,0,2,2,0,0,0,1,0},
				{1,2,2,2,0,0,0,0,0,0,2,2,2,2,2,1},
				{1,2,2,2,0,0,0,0,0,0,2,2,0,0,2,1},
				{1,0,2,2,0,0,0,0,0,0,2,0,0,0,0,1},
				{1,0,0,2,2,0,0,0,0,2,2,0,0,0,0,1},
				{1,0,0,2,2,2,2,2,2,2,2,2,0,0,2,1},
				{1,0,2,2,1,1,1,1,1,1,1,1,2,2,2,1},
				{0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,0},
				{0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0},
				{0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0},
				{0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0},
				{0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0}
		};

		final int[][] simpleStructure = new int[][]{
				{1,1,1,1,1},
				{1,0,1,0,1},
				{1,1,1,1,1},
				{1,0,1,0,1},
				{1,1,1,1,1},


		};
		final int[][] Frenchflag = new int[][]{
				{1,1,0,0,2,2},
				{1,1,0,0,2,2},
				{1,1,0,0,2,2},
				{1,1,0,0,2,2},
				{1,1,0,0,2,2},
				{1,1,0,0,2,2},

		};
		
		final int[][] norFlag = new int[][]{
				{2,0,1,0,2,2},
				{0,0,1,0,0,0},
				{1,1,1,1,1,1},
				{0,0,1,0,0,0},
				{2,0,1,0,2,2},
				{2,0,1,0,2,2},


		};
		
		final int[][] flag = new int[][]{
				{1,1,2,2,3,3},
				{1,1,2,2,3,3},
				{1,1,2,2,3,3},
				{1,1,2,2,3,3},
				{1,1,2,2,3,3},
				{1,1,2,2,3,3},

		};
		
		final  int[][] norFlagBigBorderd = new int[][]{
			{1,2,3,2,1,1,1},
			{1,2,3,2,1,1,1},
			{2,2,3,2,2,2,2},
			{3,3,3,3,3,3,3},
			{2,2,3,2,2,2,2},
			{1,2,3,2,1,1,1},
			{1,2,3,2,1,1,1},


	};
		
		final  int[][] creeperRep = new int[][]{
			{2,2,2,2,2,2,2,2},
			{2,1,1,2,2,1,1,2},
			{2,1,1,2,2,1,1,2},
			{2,2,2,1,1,2,2,2},
			{2,2,1,1,1,1,2,2},
			{2,2,1,1,1,1,2,2},
			{2,2,1,2,2,1,2,2},
			{2,2,2,2,2,2,2,2},
	};
		final  int[][] dot = new int[][]{
			{1},
		};
	
	



		/*  Initialize variables */ 
		int dimentions = 2; 
		int boardSize = 30;
		int numOfStates = 4;
		int numberOfRuns = 40;
		boolean randomStart = false;
		boolean vonNeumannNeighbourhood = true;

		CA ca = new CA(dimentions, boardSize, numOfStates, randomStart, vonNeumannNeighbourhood);
		ca.useWriter();
		
		ca.setBoard(generateReplicationBoard(creeperRep));
		//				ca.setRulesElementary(122);
		//		ca.setRandomRules();
//				ca.setGameOfLife();
//				ca.setBoard(gliderGun);
		//		ca.setRules("11101010010010101101110010100001");
		//		ca.setRules("10000101101111011101101111111100");
		//		ca.setRules("10110110011010010010001101111110");
		//		ca.setRules("11000001100000101000000111010000");
		//		ca.setRules("11001100111011011100110100010100");
		//		ca.setRules("3311312132013101133130210202210333022022232322021320312233112313300020312011210313332113031022002130003300321102000213122032302203220331203001201203130003031130000130211310202103202003123023013021130123012003302011013322203102312212023230320301002023031101113233203112300320312311301032221023110213010323021110311213302321232301332213202221113313130320013322020013012310122320210110100313230232221122003123120101102213130333102122111303230002232000023120112100022302232320210122023232323221310033033301121103003213123000332332222031133013320300110130322233031110120013003232311120001213222310132112223303003312103020130201330131210012323013112320200201321203333101112330220211320332023223231222301333323232301311131013100223032300321233023020321010121132022210012110022101233012013132103321020323313131220100131201332023123211312303101131231103300201300203200322331201331123210210321202002131302013202102330011131121221013020333303312121013100221120002223131232213113233013213020023011201023202122120203131031332230032000030");
		//	ca.setRules("3301310230201210320320030212211110300222323310320123202021210123032110231103220011102311123113331232020102023321002103010221300120112303303022333030133102102301331103121203232202131100330332221301201321203113021201321211123220330222303103023010022311111002033130133213112310210200122200131202211212333121101301311112333033302230031203133231230232211102303221330020203313000321312022221210232110103221331120331200302121123231021222033212013210330123100011231122031133210331102323023333122232202230010022102233120130133112230302131103001301332022132221103310133230201131100102203002210230100023220121312000322320220000032213022110322122223031212113130230200322123122213110223100003303223231030303000002003222213023303303310210100103010002103133022103101000313031130000111032131000013113333310022233031232331012101313101133332313112320100321011021303123100033122020302221122001000222321302203332100110331130230303333133001303212032022001321123320211123202203311313022032311100122312233000322201320012221020003010003232202333133");

		//interesting flag ca found using long run TT
		//				ca.setRules("2212223303122120033020103333010123323013102230203332212220201103202000001301211210001123030120020331200010023312113002303220130222013201232313111032202130311123331212230322312302101312033232233221030332022221313311131320301031222113330032303321231112201100020102110212033212122303231212002232211230301313302221301023033012203311111112002132230120033220210103000130213322330120300313011203212100300201203032202022023301023313131331323223333213311132103223221323023312321123333230303331002031103121020311312021320013322130310022303131232222330330022023010003332302013213213111220211121010131221200030230301023303313211033031002013330120130222023203222223320022323112031133101101333202022222010110002010313033113332302003211233000032122000232302321322231031113023320122302122133021000331103330303231031222233331312113102313000132223311213301333301211322213012231133230120313303200030311333301222310112112221213120001000022130000313123003111323322201232103330320010100122322211211201011133200223030233111021302132310130102113333" );
		//				ca.setRules("2233211133223220221312322201310301011130222110323133033310113223301320103002133210032331201012010033301123010230003132002331301030303123132020321301201203113032203010102213232211233323031121233112002022122023233333202013133010131300322103022212232330303323113110022212220230213310021030232212031321010331130333033022203012203030103123130212302031201133200222110303103310102313131023233020311021300001012202310303200133203213210301323131131032112010020222300132222113020202231122311210013301013211230100013113202330230133001002232133310311100122220020131021020130313320323311033220013230323101332122311231133103310301001102333012212332100132200012301013200110312132030102311312012322222312331100033100133311223230032122223311332310310210210210030332023311002231012333122301223131102310300233030232120302232210202312002232323331132212013210002330132230212311000020132220332130213101321302330030030002033120320103210311331032213210020210201221320222333203222230013002311020301122201331330223200313300210011031032111021213331030" );
//						ca.setRules("1133200130102033333031022110130131313101310320100201231300200020001012222211210312131300003021231031100232100313230102333113333230133302221233101001130003211303100003230203010013300002211100000112223133023131032221213033312003300321031333211022230022011030003222300210133210030332032000020332212300012320231200133300011022033103233232230032112111100120200331202333010101031103001012202233133131003313310222102230120030202112233100331232120331330312102233221222100332123212112120310132310322211122313131102033331323120101233123031322101231220331213133313110312032230200011201330233021100121221312100123131323001122111103113203331102022123111013022113213213121200310131211333112311303211112033213331311113021223131033203113100012330310200023012133001333222230230313213312332011232320311310000111033200203021232012320110130001302221000233303310223221320232002232202213201020232003013332002003101212323020100231311202233231230021123002001110323123321013122332232100202201223003312322310113203322203202300020010113212001222121230" );
//		/*what is my purpose?*/		ca.setRules("3333332233032202002101201221032121220002303222103220321111102002111332202030301213123222221220032202202311301333000212031110032101102001223131032221220120221101330220201222312020130121221001321311030212232111122301121310013103120330333233011203021320333111131323002313121310212203021332120231322101321322030002202333021133221003100230023313010101221001110030233221320220332011030011203112130233223023011132032021213100112202020120100121323331203302031032003110210222221313311320032112232221022023102303002122033333203123300003213002031123002031332120220011332110321311110012032333101001123032111333320332323200220031332021121221023101221101321002320201010032022232011121222202131231233103312031233231200203011003322203121332232122132133033132321033210223203121313331012311123332220030021121303313310220003313222013113022330022101210200320331010212311123322113020222230213321221200220000002120020212323001032013110131013131002022012101310221003020300203220323223220320011210122113213200201001002322003002330211113300321133013" );
//		ca.setRules("2130022221113110202001311333011313201312210123023031100111331211331030332323130131210221102201210322302101221100121111121032202012100322302131113123032312013213010301322202302301100030223230120220312010232000010313133032200110132030233033001102023302331202203101312313303312333213231232020000032013112103020210131232003223013322231221112213032120330103032312212130332133021002013212101122120102300301330302132030230032213100200021313110233031133130320120223321110220310322330332311320232023332133231210210331310101303003321021013122212212200122102322123103130321303232003331111300211023310130323312103210322120100111103333023322320121303003131113232013312331311221330122033121131320311303312200222313110210023121030332321103203330021333210303202221310112231120132011202033002112320102312121221232000333121022022313320011203311333131030032132233032320101201210301233120320331232310222131002220133311203130203323011320213120232021330333110213013103313133001022120102310001001112030132101111323010330200311001031200222202023320" );
		//		/*creeper 100	*/	ca.setRules("100111101122121211102220210001022112021121202212220022122211110222122210200110100010011111210022102002002210010012112121221212202221202222200222201120020021212110200022122220122200211200200020122002221022021111211200011111211122011012201111111");
		
		//evoDevo
	//	ca.setRules("11000001000011000001010111001010");
				//ca.setRules("002000212220202011011111022202102100021211002012120101210202110020200002210122212210020022121111020002112212200112101111022010011201001202021010200212102122012111012201012000220020011220102022100212202221111021101012210201022202212001100211121");
		ca.setRules("2012333013033002020022232311203020030330000223020022112131232030303303010331210001320021032000012230112200202220100030210003021202231331302320200232130103112332311202301223200232133032013212203111312112302013230013131031010332213210221230111133232320233001110110131312101311101333223220323103210003112323020031002210202033101223211320220022300101213233021022122031321122120020002010010010202030331312102003203022101332103001222230031110303021221020222012300320132100332331221202130133203322100330221122212233223013123132311022111031122231320120212012321303221113131303210033111123313132012311210011120120110102113023302222221210013210212010232120231122302130201031121113302321132102221033210310232023222221023333000202200212110210330033112332310300030213221313023333232220013213311032300112221112112031032130013313000201112122103310023011110132321003220101110102000130121010303021120230223211331002322033021210132332213112311202312303202102300001320321232022212313220200101323320000103123130011000032111102320132303003121121");
		ca.start(numberOfRuns);
		
//		int m = 0;
//		for (int k = 5; k < numberOfRuns; k++) {
//			ca.start(1);
//			int f = 0;
//			for (int i = 0; i < mushroom.length; i++) {
//				for (int j = 0; j < mushroom.length; j++) {
//					if(ca.getBoard()[i][j]==mushroom[i][j]/**/){
//						f ++;
//					}
//				}
//
//			}
//			if(f>m){
//				m=f;
//				System.out.println("New best  fitness at: " + k);
//			}
//			System.out.println(k + ":" + f);
//		}




	}
	
	private static int [][] generateReplicationBoard(int [][] replicator){
		int s = 30;
		int x = (s/2) - (replicator.length/2);
		int y = (s/2) - (replicator[0].length /2);

		int [][] newBoard = new int [s][s];
		for (int i = x; i < x+replicator.length; i++) {
			for (int j =y; j < y+replicator[0].length; j++) {
				System.out.println(i + ":" + j);
				newBoard[i][j] = replicator[i-x][j-y];
			}
		}
		return newBoard;

	}


}
